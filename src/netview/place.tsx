import * as React from 'react';

import * as Utils from './utils';

import {PlaceData} from '../netmodel';
import {BoundingBox} from '../types';
import {createViewElement} from './viewelement';


interface Props {
    // tunneled properties
    data: PlaceData;
    bboxes: {major: BoundingBox, minors?: {[key: string]: BoundingBox}};

    // properties autmatically generated by view element component
    bbox: BoundingBox,
    handlers: {
        batchMove: (dx: number, dy: number) => void;
        unitMove: (dx: number, dy: number) => void;
        resize: (bbox: BoundingBox) => void;
    },
}


class CorePlace extends React.PureComponent<Props> {

    public render () {
        const {bbox, bboxes: { major: placeBBox, minors={} } } = this.props;
        const {name: nameBBox, initExpr: exprBBox, type: typeBBox} = minors;

        return (
            <g>
                {createMovebale(this.renderPlace(bbox, placeBBox), callback)}
                {this.renderText(bbox, nameBBox)}
                {this.renderText(bbox, typeBBox)}
                {this.renderText(bbox, exprBBox)}
            </g>
        );
    }

    protected renderPlace(bbox: BoundingBox, placeBBox: BoundingBox) {
        const handlers = this.props.handlers;
        const radius = placeBBox.height / 2;

        // TODO: moving events
        return (
            <rect
                {...Utils.absolutizeBouningBoxes(bbox, [placeBBox])[0]}
                rx={radius}
                ry={radius}
                onMouseDown={this.props.triggerMouseDown)}
                onMouseUp={this.props.triggerMouseUp)}
            />
        );
    }

    protected renderText(bbox: BoundingBox, textBbox: BoundingBox | undefined) {
        if (textBbox === undefined) {
            return null;
        }

        return (
            <rect
                {...Utils.absolutizeBouningBoxes(bbox, [textBbox])[0]}
                onMouseDown={this.props.triggerMouseDown}
                onMouseUp={this.props.triggerMouseUp}
            />
        );
    }
}

export const Place = createViewElement<{place: TPlace}>(CorePlace);
